import "enum"
import "lexer"
import "variable"
import "parser"
import "codegen"

fn get_index_of_last_slash(filepath: str): int {
    let index = filepath.len() - 1;
    while (index >= 0) {
        if (filepath[index] == '/') {
            return index;
        }
        index = index - 1;
    }
    return -1;
}

fn compile_file(file_name: str) {
    file_name = relative_directory + file_name;

    let old_token_index = token_index;
    token_index = 0;
    let old_lexer_position = lexer_position;
    lexer_position = 0;

    let old_input_text = input_text;
    input_text = read_file(file_name);
    text_size = len(input_text);

    let old_tokens = tokens;
    tokens = lex_all_tokens();
    token_count = tokens.len();

    let old_relative_directory = relative_directory;
    let index = get_index_of_last_slash(file_name);
    if (index != -1) {
        relative_directory = file_name[0..index + 1];
    }
    else {
        relative_directory = "";
    }
 
    while (peek_next_token() != (0 as Token*)) {
        if (peek_next_token()->type == END) {
            break;
        }
        let node = get_statement();

        compile_statement(0 as TextBuffer*, 0 as StackFrame*, node, 0 as FunctionSignature*, 0 as LoopSignature*);
    }
    input_text = old_input_text;
    text_size = len(input_text);

    tokens = old_tokens;
    if (tokens) {
        token_count = tokens.len();
    }
    token_index = old_token_index;
    lexer_position = old_lexer_position;
    relative_directory = old_relative_directory;
}


let print_asm_code = ".globl print\nprint:\n\tpushq %rbp\n\tmovq %rsp, %rbp\n\n\tmovq 16(%rbp), %rdi\n\tcall strlen_internal\n\n\tmovq %rax, %rdx\n\tmovq $1, %rax\n\tmovq $1, %rdi\n\tmovq 16(%rbp), %rsi\n\tsyscall\n\tleave\n\tret\n";

let strlen_internal_asm_code = ".globl strlen_internal\nstrlen_internal:\n\txor %rcx, %rcx\n.loop:\n\tmovb (%rdi,%rcx,1), %al\n\ttest %al, %al\n\tje .done\n\tinc %rcx\n\tjmp .loop\n.done:\n\tmovq %rcx, %rax\n\tret\n";
    
let long_to_str_asm_code = ".globl long_to_str\nlong_to_str:\n\tpush %rbp\n\tmovq %rsp, %rbp\n\tmovq %rax, %rbx\n\tmovq $16, %rdi\n\tcall malloc\n\tmovq %rax, %rdi\n\tmovq %rbx, %rcx\n\tmovq $16, %rsi\n\tleaq .long_fmt(%rip), %rdx\n\txor %al, %al\n\tmovq %rdi, %rbx\n\tcall snprintf\n\tmovq %rbx, %rax\n\tleave\n\tret\n";

let int_to_str_asm_code = ".globl int_to_str\nint_to_str:\n\tpush %rbp\n\tmovq %rsp, %rbp\n\tmovl %eax, %ebx\n\tmovq $16, %rdi\n\tcall malloc\n\tmovq %rax, %rdi\n\tmovslq %ebx, %rcx\n\tmovq $16, %rsi\n\tleaq .int_fmt(%rip), %rdx\n\txor %al, %al\n\tmovq %rdi, %rbx\n\tcall snprintf\n\tmovq %rbx, %rax\n\tleave\n\tret\n";

let char_to_str_asm_code = ".globl char_to_str\nchar_to_str:\n\tpushq %rbp\n\tmovq %rsp, %rbp\n\tmovb %al, %bl\n\tmovq $16, %rdi\n\tcall malloc\n\tmovq %rax, %rdi\n\tmovb %bl, (%rdi)\n\tmovb $0, 1(%rdi)\n\tmovq %rdi, %rax\n\tleave\n\tret\n";

let read_file_asm_code = ".globl read_file\nread_file:\n\tpushq %rbp\n\tmovq %rsp, %rbp\n\tmovq %rax, %rdi\n\tmovq $2, %rax\n\tmovq $0, %rsi\n\tmovq $0, %rdx\n\tsyscall\n\tmovq %rax, %r12\n\tmovq $5, %rax\n\tmovq %r12, %rdi\n\tleaq file_statbuf(%rip), %rsi\n\tsyscall\n\tmovq 48+file_statbuf(%rip), %r15\n\tmovq %r15, %rdi\n\taddq $1, %rdi\n\tcall malloc\n\tmovq %rax, %r13\n\n\tmovq $0, %rax\n\tmovq %r12, %rdi\n\tmovq %r13, %rsi\n\tmovq %r15, %rdx\n\tsyscall\n\tmovq %rax, %r14\n\taddq %r13, %r14\n\tmovb $0, (%r14)\n\tmovq $3, %rax\n\tmovq %r12, %rdi\n\tsyscall\n\tmovq %r13, %rax\n\tleave\n\tret\n";

let append_char_asm_code = ".globl __append_char\n__append_char:\n\tpushq %rbp\n\tmovq %rsp, %rbp\n\tmovq %rax, %r12\n\tmovl 12(%r12), %edx\n\tmovl 8(%r12), %ecx\n\taddl $1, %ecx\n\tcmpl %ecx, %edx\n\tjge .L_after_grow_char\n\taddl %edx, %edx\n\tmovl %edx, 12(%r12)\n\tmovslq %edx, %rsi\n\timulq $1, %rsi\n\tmovq (%r12), %rdi\n\tcall realloc\n\tmovq %rax, (%r12)\n\tmovq %r12, %rax\n.L_after_grow_char:\n\tmovslq 8(%rax), %rdx\n\tmovq (%rax), %rax\n\tleaq (%rax, %rdx, 1), %rax\n\tmovb %bl, (%rax)\n\tleave\n\tret\n";

let append_long_asm_code = ".globl __append_long\n__append_long:\n\tpushq %rbp\n\tmovq %rsp, %rbp\n\tmovq %rax, %r12\n\tmovl 12(%r12), %edx\n\tmovl 8(%r12), %ecx\n\taddl $1, %ecx\n\tcmpl %ecx, %edx\n\tjge .L_after_grow_long\n\taddl %edx, %edx\n\tmovl %edx, 12(%r12)\n\tmovslq %edx, %rsi\n\timulq $4, %rsi\n\tmovq (%r12), %rdi\n\tcall realloc\n\tmovq %rax, (%r12)\n\tmovq %r12, %rax\n.L_after_grow_long:\n\tmovslq 8(%rax), %rdx\n\tmovq (%rax), %rax\n\tleaq (%rax, %rdx, 4), %rax\n\tmovl %ebx, (%rax)\n\tleave\n\tret\n";

let append_quad_asm_code = ".globl __append_quad\n__append_quad:\n\tpushq %rbp\n\tmovq %rsp, %rbp\n\tmovq %rax, %r12\n\tmovl 12(%r12), %edx\n\tmovl 8(%r12), %ecx\n\taddl $1, %ecx\n\tcmpl %ecx, %edx\n\tjge .L_after_grow_quad\n\taddl %edx, %edx\n\tmovl %edx, 12(%r12)\n\tmovslq %edx, %rsi\n\timulq $8, %rsi\n\tmovq (%r12), %rdi\n\tcall realloc\n\tmovq %rax, (%r12)\n\tmovq %r12, %rax\n.L_after_grow_quad:\n\tmovslq 8(%rax), %rdx\n\tmovq (%rax), %rax\n\tleaq (%rax, %rdx, 8), %rax\n\tmovq %rbx, (%rax)\n\tleave\n\tret\n";

let append_string_to_builder_asm_code = ".globl __append_string_to_builder\n__append_string_to_builder:\n\tpushq %rbp\n\tmovq %rsp, %rbp\n\tmovq %r12, %rdi\n\tcall strlen\n\tmovq %rax, %rbx\n\tmovq %r14, %rax\n\taddq %rbx, %rax\n\tincq %rax\n\tcmpq %r13, %rax\n\tjbe .L_after_grow_builder_string\n.L_grow_builder_string:\n\taddq %r13, %r13\n\tcmpq %rax, %r13\n\tjb .L_grow_builder_string\n\tmovq %r13, %rsi\n\tmovq %r15, %rdi\n\tcall realloc\n\tmovq %rax, %r15\n.L_after_grow_builder_string:\n\tleaq (%r15,%r14), %rdi\n\tmovq %r12, %rsi\n\tmovq %rbx, %rdx\n\taddq %rbx, %r14\n\tcall memcpy\n\tmovb $0, (%r15,%r14)\n\tleave\n\tret\n";

let append_char_to_builder_asm_code = ".globl __append_char_to_builder\n__append_char_to_builder:\n\tpushq %rbp\n\tmovq %rsp, %rbp\n\t\tmovq $1, %rbx\n\tmovq %r14, %rax\n\taddq %rbx, %rax\n\tincq %rax\n\tcmpq %r13, %rax\n\tjbe .L_after_grow_builder_char\n.L_grow_builder_char:\n\taddq %r13, %r13\n\tcmpq %rax, %r13\n\tjb .L_grow_builder_char\n\tmovq %r13, %rsi\n\tmovq %r15, %rdi\n\tcall realloc\n\tmovq %rax, %r15\n.L_after_grow_builder_char:\n\tleaq (%r15,%r14), %rdi\n\tmovb %r12b, (%r15,%r14)\n\taddq %rbx, %r14\n\tmovb $0, (%r15,%r14)\nleave\n\tret\n";

fn main(): int {
    current_target = AARCH64;

    if (argc != 2) {
        print("Usage: ./compiler input_file\n");
        return 1;
    }

    global_scope = new_global_scope();

    struct_registry = new StructRegistry*;
    struct_registry->definitions = new StructDefinition*[];
    function_registry = new FunctionRegistry*;
    function_registry->signatures = new FunctionSignature*[];

    instructions = new Instruction*[];
    register_names_byte = new str[];
    register_names_dword = new str[];
    register_names_qword = new str[];
    if (current_target == X86_64) {
        register_names_byte.append("%al");
        register_names_byte.append("%bl");
        register_names_byte.append("%cl");
        register_names_byte.append("%dl");
        register_names_byte.append("%sil");
        register_names_byte.append("%dil");
        register_names_byte.append("%bpl");
        register_names_byte.append("%spl");
        register_names_byte.append("%r8b");
        register_names_byte.append("%r9b");
        register_names_byte.append("%r10b");
        register_names_byte.append("%r11b");
        register_names_byte.append("%r12b");
        register_names_byte.append("%r13b");
        register_names_byte.append("%r14b");
        register_names_byte.append("%r15b");

        register_names_dword.append("%eax");
        register_names_dword.append("%ebx");
        register_names_dword.append("%ecx");
        register_names_dword.append("%edx");
        register_names_dword.append("%esi");
        register_names_dword.append("%edi");
        register_names_dword.append("%ebp");
        register_names_dword.append("%esp");
        register_names_dword.append("%r8d");
        register_names_dword.append("%r9d");
        register_names_dword.append("%r10d");
        register_names_dword.append("%r11d");
        register_names_dword.append("%r12d");
        register_names_dword.append("%r13d");
        register_names_dword.append("%r14d");
        register_names_dword.append("%r15d");

        register_names_qword.append("%rax");
        register_names_qword.append("%rbx");
        register_names_qword.append("%rcx"); 
        register_names_qword.append("%rdx");
        register_names_qword.append("%rsi");
        register_names_qword.append("%rdi");
        register_names_qword.append("%rbp");
        register_names_qword.append("%rsp");
        register_names_qword.append("%r8");
        register_names_qword.append("%r9");
        register_names_qword.append("%r10");
        register_names_qword.append("%r11");
        register_names_qword.append("%r12");
        register_names_qword.append("%r13");
        register_names_qword.append("%r14");
        register_names_qword.append("%r15");
    }
    elseif (current_target == AARCH64) {
        register_names_dword.append("w0");
        register_names_dword.append("w19");
        register_names_dword.append("w2");
        register_names_dword.append("w3");
        register_names_dword.append("w0");
        register_names_dword.append("w1");
        register_names_dword.append("w29");
        register_names_dword.append("wsp");
        register_names_dword.append("w4");
        register_names_dword.append("w5");
        register_names_dword.append("w6");
        register_names_dword.append("w7");
        register_names_dword.append("w8"); 
        register_names_dword.append("w20"); 
        register_names_dword.append("w21"); 
        register_names_dword.append("w22"); 

        register_names_qword.append("x0");
        register_names_qword.append("x19");
        register_names_qword.append("x2");
        register_names_qword.append("x3");
        register_names_qword.append("x0");
        register_names_qword.append("x1");
        register_names_qword.append("x29");
        register_names_qword.append("sp");
        register_names_qword.append("x4");
        register_names_qword.append("x5");
        register_names_qword.append("x6");
        register_names_qword.append("x7");
        register_names_qword.append("x8"); 
        register_names_qword.append("x20"); 
        register_names_qword.append("x21"); 
        register_names_qword.append("x22"); 
    }


    if (current_target == X86_64) {
        let print_signature = add_signature(function_registry);
        print_signature->name = "print";
        print_signature->return_type = VOID;
        add_parameter(print_signature, "str_var", STRING_VARIABLE);

        let int_to_str_signature = add_signature(function_registry);
        int_to_str_signature->name = "int_to_str";
        int_to_str_signature->return_type = STRING_VARIABLE;
        add_parameter(int_to_str_signature, "int_var", INT_VARIABLE);

        let long_to_str_signature = add_signature(function_registry);
        long_to_str_signature->name = "long_to_str";
        long_to_str_signature->return_type = STRING_VARIABLE;
        add_parameter(long_to_str_signature, "long_var", LONG_VARIABLE);

        let char_to_str_signature = add_signature(function_registry);
        char_to_str_signature->name = "char_to_str";
        char_to_str_signature->return_type = STRING_VARIABLE;
        add_parameter(char_to_str_signature, "char_var", CHAR_VARIABLE);

        let read_file_signature = add_signature(function_registry);
        read_file_signature->name = "read_file";
        read_file_signature->return_type = STRING_VARIABLE;
        add_parameter(read_file_signature, "str", STRING_VARIABLE);
    }


    if (current_target == X86_64) {
        print(".section .text\n");
        print(".extern memcpy\n");
        print(".extern memset\n");
        print(".extern malloc\n");
        print(".extern realloc\n");
        print(".extern strcmp\n");
        print(".extern strlen\n");
        print(".extern snprintf\n");
    } elseif (current_target == AARCH64) {
        print(".text\n");
        print(".extern _memcpy\n");
        print(".extern _memset\n");
        print(".extern _malloc\n");
        print(".extern _realloc\n");
        print(".extern _strcmp\n");
        print(".extern _strlen\n");
        print(".extern _snprintf\n");
    }

    compile_file(argv[1]); 

    if(current_target == X86_64) {
        print(print_asm_code);
        print(strlen_internal_asm_code);
        print(long_to_str_asm_code);
        print(int_to_str_asm_code);
        print(char_to_str_asm_code);
        print(read_file_asm_code);

        print(append_char_asm_code);
        print(append_long_asm_code);
        print(append_quad_asm_code);

        print(append_string_to_builder_asm_code);
        print(append_char_to_builder_asm_code);
    }

    if (current_target == X86_64) {
        print(".section .data\n");
    } elseif (current_target == AARCH64) {
        print(".data\n");
    }
    for (let i = 0; i < global_scope->variables.len(); i = i + 1) {
        let variable_type = global_scope->variables[i]->type;

        if (is_const(variable_type)) {
            continue;
        }

        if (variable_type == STRING_LITERAL_VARIABLE) {
            continue;
        }
        if (current_target == X86_64) {
            print("\t." + global_scope->variables[i]->name + ":\t");
        } elseif (current_target == AARCH64) {
            print("\t_" + global_scope->variables[i]->name + ":\t");
        }
        if (is_pointer(variable_type) || is_array(variable_type)) {
            print(".quad " + *(global_scope->variables[i]->value as long*).long_to_str() + "\n");
        }
        elseif (variable_type == STRING_VARIABLE) {
            print(".quad ." + (global_scope->variables[i]->value as char*) + "\n");
        }
        elseif (variable_type == INT_VARIABLE) {
            print(".quad " + (*(global_scope->variables[i]->value as int*)).int_to_str() + "\n");
        }
        elseif (variable_type == LONG_VARIABLE) {
            print(".quad " + *(global_scope->variables[i]->value as long*).long_to_str() + "\n");
        }
        elseif (variable_type == CHAR_VARIABLE) {
            print(".byte " + (*(global_scope->variables[i]->value as char*) as int).int_to_str() + "\n");
        }
    }
    
    if (current_target == X86_64) {
        print(".section .rodata\n");
    } elseif (current_target == AARCH64) {
        print(".const\n");
    }
    for (let i = 0; i < global_scope->variables.len(); i = i + 1) {
        let variable_type = global_scope->variables[i]->type;
        if (is_const(variable_type)) {
            continue;
        }
        if (variable_type == STRING_LITERAL_VARIABLE) {
            if (current_target == X86_64) {
                print("\t." + global_scope->variables[i]->name + ":\t");
            }
            elseif (current_target == AARCH64) {
                print("\t_" + global_scope->variables[i]->name + ":\t");
            }
            print(".string \"" + ((global_scope->variables[i]->value) as char*) + "\"\n");
        }
    }
    if (current_target == X86_64) {
        print("\t.long_fmt:\t.string \"%ld\"\n");
        print("\t.int_fmt:\t.string \"%d\"\n");
        print(".section .bss\n");
        print("\tfile_statbuf:\t.skip 144\n");
    } elseif (current_target == AARCH64) {
        print("\t_long_fmt:\t.asciz \"%ld\"\n");
        print("\t_int_fmt:\t.asciz \"%d\"\n");
        print(".bss\n");
        //print("\t_file_statbuf:\t.skip 144\n");
    }

    return 0;
}